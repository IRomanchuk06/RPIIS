
#include <iostream>
#include <vector>
using namespace std;
    class ClosureGraph {
    public:
        ClosureGraph(int vertices) : vertices(vertices), closureMatrix(vertices, vector<int>(vertices, 0)) {}
        void addEdge(int v, int w) {
            closureMatrix[v - 1][w - 1] = 1;
            closureMatrix[w - 1][v - 1] = 1;
        }

        void computeClosure() {
            for (int k = 0; k < vertices; ++k) {
                for (int i = 0; i < vertices; ++i) {
                    for (int j = 0; j < vertices; ++j) {
                        closureMatrix[i][j] = closureMatrix[i][j] || (closureMatrix[i][k] && closureMatrix[k][j]);
                    }
                }
            }
        }

        void printClosureMatrix() {
            setlocale (LC_ALL, "RU");
            cout << "Граф замыкания :" << endl;
            for (int i = 0; i < vertices; ++i) {
                for (int j = 0; j < vertices; ++j) {
                    cout << closureMatrix[i][j] << " ";
                }
                cout << endl;
            }
        }

    private:
        int vertices;
        vector<vector<int>> closureMatrix;
    };

    int main() {
        setlocale(LC_ALL, "RU");
        int vertices, edges;
        cout << "Введите количество вершин графа : ";
        cin >> vertices;
        cout << "Введите количество рёбер графа : ";
        cin >> edges;

        ClosureGraph closureGraph(vertices);

        cout << "Введите пары вершин, которые нужно соединить рёбрами :" << endl;
        for (int i = 0; i < edges; i++ ) {
            int v, w;
            cout << i+1 << ":"<< " ";
            cin >> v >> w;
            closureGraph.addEdge(v, w);
        }

        closureGraph.computeClosure();
        closureGraph.printClosureMatrix();
        return 0;
    }

