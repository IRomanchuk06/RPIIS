#include<iostream>
#include"Header.h"
namespace myspace {
	int min(int a, int b)
	{
		return a < b ? a : b;
	}
	int max(int a, int b)
	{
		return a > b ? a : b;
	}
	
	dm* build(int l, int r)
	{
		dm* root = new dm;
		root->max = 0;
		root->add = 0;
		root->l = l;
		root->r = r;
		if (l < r)
		{
			root->left = build(l, (l + r) / 2);
			root->right = build((l + r) / 2 + 1, r);
		}
		else
		{
			root->left = nullptr;
			root->right = nullptr;
		}
		return root;
	}
	void modify(dm* root, int l, int r, int val)
	{
		if (root->l == l && root->r == r) root->add += val;
		else
		{
			if (l <= root->left->r) modify(root->left, l, min(r,

				root->left->r), val);

			if (r >= root->right->l) modify(root->right, max(l,

				root->right->l), r, val);

			root->max = max(root->left->max + root->left->add, root->right->max + root->right->add);
		}
	}
	int findmax(dm* root, int l, int r, int sumadd)
	{
		if (root->l == l && root->r == r) return sumadd + root->max;
		else
		{
			int res = -std::numeric_limits<int>::min();
			if (l <= root->left->r)
				res = max(findmax(root->left, l, min(r, root->left->r), sumadd + root->left->add), res);

			if (r >= root->right->l)
				res = max(findmax(root->right, max(l, root->right->l), r, sumadd + root->right->add), res);

			return res;
		}
	}
	void deleteTree(dm* root)
	{
		if (root == nullptr)
		{
			return;
		}
		deleteTree(root->left);
		deleteTree(root->right);
		delete root;
	}
}