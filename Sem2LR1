/*
17. Ориентированный граф. Вставка вершины. Удаление вершины.
Вставка дуги. Удаление дуги. Построение дерева обхода в ширину.

Постановка задачи

!1. Разработать библиотеку для работы со структурой данных, указанной в
индивидуальном задании, на любом императивнойм языке
программирования (Pascal, C\C++, Java, C#, Python и др.)
2. Разработать тестовую программу, которая демонстрирует
работоспособность реализованной библиотеки работы со структурой
данных.
3. Разработать систему тестов, которые продемонстрировали бы
работоспособность реализованной библиотеки. Система тестов должна
отвечать требованиям полноты, адекватности и непротиворечивости.
Система тестов должна учитывать не только корректную работу на
правильных данных, но и предусматривать корректное завершение
программы в случае некорректных данных.
4. По результатам выполнения задания составить отчет.

12. Ориентированный граф [3, с. 609 - 612, 612 - 621]
*/
/*
!1. Ввод матрицы инцидентности;
!2. Функция вставки вершины;
!3. Функция удаление вершины;
!4. Функция вставки дуги;
!5. Функция удаления дуги;
6. Функция обхода в ширину;
!7. Меню.
*/

#include <iostream>
#include "graph.h"

using namespace std;

void ShowMenu();

int main()
{
    setlocale(LC_ALL, "ru");
    int choice;
    Graph mat;
    mat.InputMatrix();
    
    do {
        ShowMenu();
        cin >> choice;

        switch (choice) {
        case 1:
            mat.PrintMatrix();
            break;
        case 2:
            mat.AddVertex();
            break;
        case 3:
            mat.DelVertex();
            break;
        case 4:
            mat.AddArc();
            break;
        case 5:
            mat.DelArc();
            break;
        case 6:
            mat.BFS();
            break;
        case 7:
            cout << "До свидания!" << endl;
            break;
        default:
            cout << "Неверный выбор. Пожалуйста, выберите существующую опцию." << endl; 
            break;
        }

    } while (choice != 7); // Выход из меню при выборе опции 7
    
    return 0;
}

void ShowMenu() {
    cout << "=== Меню ===" << endl;
    cout << "1. Вывести матрицу" << endl;
    cout << "2. Добавить вершину" << endl;
    cout << "3. Удалить вершину" << endl;
    cout << "4. Добавить дугу" << endl;
    cout << "5. Удалить дугу" << endl;
    cout << "6. Обойти граф в ширину" << endl;
    cout << "7. Выход" << endl;
    cout << "Выберите опцию: ";
}

//Добавление дуги, испрпавить баг с "недопустимфм значением при последней вершине"
//При удалении вершины не удаляются оставшиеся части дуг
//При добавлении дуги ее нельзя создать с последней вершиной   дон шайтан 
