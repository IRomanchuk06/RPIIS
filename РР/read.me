# Расчетная работа 

## Введение

### Цель

Изучить основы теории графов, способы представления графов, базовые алгоритмы для работы с графами

### Задание

1.20 (Проверить является ли граф, заданный с помощью матрицы смежности графом Паппа)

### Ключевые понятия

Граф - математическая абстракция реальной системы любой природы, объекты которой обладают парными связями.

Неориентированный граф -  тип графа, в котором ребра не имеют заданного направления, присвоенного им.

Матрица смежности - матрица NxN представляющая собой граф. N - кол-во вершин графа. Пересечение вершин обозначается 1 в соответствующей ячейке матрицы.

Граф Паппа - двудольный 3-регулярный симметричный неориентированный граф с 18 вершинами и 27 рёбрами.

## Алгоритм решения

1. Дать пользователю выбор: задать граф случайно или правильно.
2. Для случайного графа:
2.0. Создаём матрицу.
2.1. Даём пользователю ввести кол-во вершин.
2.2. Проверяем кол-во вершин.
2.3. Проверяем неориентированность.
2.4. Проверяем кол-во рёбер.
2.5. Проверяем двудольность.
2.6. Выносим вердикт и завершаем программу.


3. Для правильного графа:
3.0. Создаём матрицу 18х18.
3.1. Создаём цикл "for" присваивания значения "1" элементам строк, соответствуя последовательному неориентированному соединению вершин графа.
3.2. Создаём цикл for, проверяющий кол-во рёбер в каждой строке матрицы, чтобы сохранялась кратность графа равная 3. Присваиваем значения "1" элементам строк, отличным по четности от номера строки.
Иными словами, соединяем нечетный номер вершины с четным и наоборот. Симметричным элементам также присваиваем значение "1". Таким образом выполняем условие симметричности графа.
3.3. Проверяем двудольность графа через раскрашивание вершин в 2 противоположных цвета.
3.4. Выносим вердикт и завершаем программу.

## Реализация на C++

#include <iostream>
#include <iomanip>
#include <queue>
#include <math.h>
using namespace std;
int main()
{
    setlocale(LC_ALL, "RUSSIAN");
    int i = 0, j, s = 0, choice;
    cout << " Выберите номер способа задания графа: случайно(1) или правильно(2): ";
    cin >> choice;
    if (choice == 1)
    {
        int n;
        cout << " Введите кол-во вершин у графа: ";
        cin >> n;
        if (n != 18)
        {
            cout << " Кол-во вершин должно быть равно 18. Граф не является графом Паппа. ";
            return 0;
        }
        double** a;
        a = new double* [n];
        for (i = 0; i < n; i++)
            a[i] = new double[n];
        for (i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                a[i][j] = 0;
            }
        }
            for (i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    a[i][j] = rand() % 2;
                }
            }
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < n; j++)
                cout << setw(3) << a[i][j];
                cout << endl;
            }
            int y = 0;
            for (i = 0; i < n; i++)
            { 
                if (a[0][1] == 1 && a[0][n - 1] == 1)
                {
                   y++; 
                }
                if (a[n - 1][0] == 1 && a[n - 1][n - 2] == 1)
                {
                    y++;
                }
                else
                {
                    if(a[i][i - 1] == 1 && a[i][i + 1] == 1)
                    y++;
                }
            }
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < n; j++)
                {
                    if (a[i][j] == 1)
                        s++; 
                }
            }
            if (y == 3 && s == 27)
            {
                cout << " Условия кол-ва ребёр и неориентированности для графа выполнены. Производим проверку дальше. " << endl;
                bool flag = true;
                int color[18] = { 0 }; 
                for (i = 0; i < n; i++)
                {
                    if (color[i] == 0)
                    {
                        color[i] = 1; 
                        queue <int> q;
                        q.push(i);
                        while (!q.empty())
                        {
                            int v = q.front();
                            q.pop();
                            for (int j = 0; j < n; j++)
                            {
                                if (a[v][j])
                                { 
                                    if (color[j] == color[v])
                                    { 
                                        flag = false;
                                        break;
                                    }
                                    else if (color[j] == 0)
                                    { 
                                        color[j] = 3 - color[v]; 
                                        q.push(j);
                                    }
                                }
                            }
                            if (!flag)
                            {
                                break;
                            }
                        }
                    }
                }
                if (flag)
                    cout << " Условие двудольности выполняется... " << endl;
                else
                    cout << " Условие двудольности не выполняется. Граф не является графом Паппа. ";
            }
            else
                cout << " Условия кол-ва ребер и неориентированности не выполнены. Граф не является графом Паппа. " << endl;
            for (i = 0; i < n; i++)
                delete[]a[i];
            delete[]a;
            a = NULL;
    }
    if (choice == 2)
    {
        int n = 18;
        double** a;
        a = new double* [n];
        for (i = 0; i < n; i++)
        a[i] = new double[n];
        for (i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                a[i][j] = 0;
            }
        }
        for (i = 0; i < n; i++)
        {
            if (i == 0)
            {
                a[i][1] = 1;
                a[i][n - 1] = 1;
            }
            else if (i == n - 1)
            {
                a[i][0] = 1;
                a[i][n - 2] = 1;
            }
            else
            {
                a[i][i - 1] = 1;
                a[i][i + 1] = 1;
            }
        }
        for (i = 0; i < 6; i++)
        {
            if (i == 0 || i % 2 == 0)
            {
                for (j = 0; j < n; j++)
                {
                    if (a[i][j] == 1)
                        s++;
                }
                for (j = 0; j < n; j++)
                {
                    if (s == 2)
                    {
                        if (a[i][j] != 1 && j % 2 != 0)
                        {
                            a[i][j] = 1;
                            a[j][i] = 1;
                            s++;
                        }

                    }
                }
                s = 0;
            }
            if (i == 1 || i % 2 != 0)
            {
                for (j = 0; j < n; j++)
                {
                    if (a[i][j] == 1)
                        s++;
                }
                for (j = 0; j < n; j++)
                {
                    if (s == 2)
                    {
                        if (a[i][j] != 1 && j % 2 == 0)
                        {
                            a[i][j] = 1;
                            a[j][i] = 1;
                            s++;
                        }

                    }
                }
                s = 0;
            }
        }
        for (i = 6; i < 12; i++)
        {
            if (i % 2 == 0)
            {
                for (j = 6; j < n; j++)
                {
                    if (a[i][j] == 1)
                        s++;
                }
                for (j = 6; j < n; j++)
                {
                    if (s == 2)
                    {
                        if (a[i][j] != 1 && j % 2 != 0)
                        {
                            a[i][j] = 1;
                            a[j][i] = 1;
                            s++;
                        }

                    }
                }
                s = 0;
            }
            if (i % 2 != 0)
            {
                for (j = 6; j < n; j++)
                {
                    if (a[i][j] == 1)
                        s++;
                }
                for (j = 6; j < n; j++)
                {
                    if (s == 2)
                    {
                        if (a[i][j] != 1 && j % 2 == 0)
                        {
                            a[i][j] = 1;
                            a[j][i] = 1;
                            s++;
                        }

                    }
                }
                s = 0;
            }

        }
        for (i = 12; i < 17; i++)
        {
            if (i % 2 == 0)
            {
                for (j = 12; j < n; j++)
                {
                    if (a[i][j] == 1)
                        s++;
                }
                for (j = 12; j < n; j++)
                {
                    if (s == 2)
                    {
                        if (a[i][j] != 1 && j % 2 != 0)
                        {
                            a[i][j] = 1;
                            a[j][i] = 1;
                            s++;
                        }

                    }
                }
                s = 0;
            }
            if (i % 2 != 0)
            {
                for (j = 12; j < n; j++)
                {
                    if (a[i][j] == 1)
                        s++;
                }
                for (j = 12; j < n; j++)
                {
                    if (s == 2)
                    {
                        if (a[i][j] != 1 && j % 2 == 0)
                        {
                            a[i][j] = 1;
                            a[j][i] = 1;
                            s++;
                        }

                    }
                }
                s = 0;
            }

        }
        for (i = 0; i < n; i++)
        {
            for (j = 0; j < n; j++)
                cout << setw(3) << a[i][j];
            cout << endl;
        }
        cout << " Такая матрица смежности соответствует графу Паппа. " << endl;
        bool flag = true;
        int color[18] = { 0 };
        for (i = 0; i < n; i++)
        {
            if (color[i] == 0)
            {
                color[i] = 1;
                queue <int> q;
                q.push(i);
                while (!q.empty())
                {
                    int v = q.front();
                    q.pop();
                    for (int j = 0; j < n; j++)
                    {
                        if (a[v][j])
                        {
                            if (color[j] == color[v])
                            { // если цвета совпадают
                                flag = false;
                                break;
                            }
                            else if (color[j] == 0)
                            { // если цвет еще не задан
                                color[j] = 3 - color[v];
                                q.push(j);
                            }
                        }
                    }
                    if (!flag)
                    {
                        break;
                    }
                }
            }
        }
        if (flag)
            cout << " Условие двудольности выполняется. " << endl;
        else
            cout << " Условие двудольности не выполняется. Граф не является графом Паппа. ";
        for (i = 0; i < n; i++)
            delete[]a[i];
        delete[]a;
        a = NULL;
    }
    return 0;
}

## Вывод 

В ходе выполнения расчётной работы, я:

- Изучил основы теории графов
- Изучил способы представления графов
- Изучил алгоритмы для работы с графами и матрицами смежности в С++
